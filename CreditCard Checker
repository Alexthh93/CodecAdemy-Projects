``` javascript

// All valid credit card numbers
const valid1 = [4, 5, 3, 9, 6, 7, 7, 9, 0, 8, 0, 1, 6, 8, 0, 8];
const valid2 = [5, 5, 3, 5, 7, 6, 6, 7, 6, 8, 7, 5, 1, 4, 3, 9];
const valid3 = [3, 7, 1, 6, 1, 2, 0, 1, 9, 9, 8, 5, 2, 3, 6];
const valid4 = [6, 0, 1, 1, 1, 4, 4, 3, 4, 0, 6, 8, 2, 9, 0, 5];
const valid5 = [4, 5, 3, 9, 4, 0, 4, 9, 6, 7, 8, 6, 9, 6, 6, 6];

// All invalid credit card numbers
const invalid1 = [4, 5, 3, 2, 7, 7, 8, 7, 7, 1, 0, 9, 1, 7, 9, 5];
const invalid2 = [5, 7, 9, 5, 5, 9, 3, 3, 9, 2, 1, 3, 4, 6, 4, 3];
const invalid3 = [3, 7, 5, 7, 9, 6, 0, 8, 4, 4, 5, 9, 9, 1, 4];
const invalid4 = [6, 0, 1, 1, 1, 2, 7, 9, 6, 1, 7, 7, 7, 9, 3, 5];
const invalid5 = [5, 3, 8, 2, 0, 1, 9, 7, 7, 2, 8, 8, 3, 8, 5, 4];

// Can be either valid or invalid
const mystery1 = [3, 4, 4, 8, 0, 1, 9, 6, 8, 3, 0, 5, 4, 1, 4];
const mystery2 = [5, 4, 6, 6, 1, 0, 0, 8, 6, 1, 6, 2, 0, 2, 3, 9];
const mystery3 = [6, 0, 1, 1, 3, 7, 7, 0, 2, 0, 9, 6, 2, 6, 5, 6, 2, 0, 3];
const mystery4 = [4, 9, 2, 9, 8, 7, 7, 1, 6, 9, 2, 1, 7, 0, 9, 3];
const mystery5 = [4, 9, 1, 3, 5, 4, 0, 4, 6, 3, 0, 7, 2, 5, 2, 3];

// An array of all the arrays above
const batch = [valid1, valid2, valid3, valid4, valid5, invalid1, invalid2, invalid3, invalid4, invalid5, mystery1, mystery2, mystery3, mystery4, mystery5];


// Add your functions below:




/* Luhns Algorithm explained to forward code, which will check Validcards:
   starting from the right and iterate to the left 
   If starting number is less than 9 add it, if higher multiply it,
   and subtract 9 from it, then add it. continue until first nr at arr[0]

   sum up all numbers added in valid arr checker if sum === 100 and % ===
   0 the current creditcard number will be treated as being valid. 
*/

const validateCred = arr => {
  let validArr =[]
  const arrSum = (accumulator, curr) => accumulator + curr;

  for (let i = arr.length - 1; i >= 0; i--) {

    if (i % 2 === 0) {
      let substractCheck = arr[i]*2
      if (substractCheck > 9) {
        substractCheck = substractCheck - 9
      };
      validArr.push(substractCheck)
    } else if (!i % 2 === 0) {
      validArr.push(arr[i])
    }; 
  };
  validArr = validArr.reduce(arrSum)

  return validArr % 10 === 0;
} 




// our invalid creditcard checker, which filters through false and true, from our validateCred function (TIP, this is a callbackfunction, since we are implementing a function result into this function. 
const findInvalidCards = nArray => {
  let invalidCards = nArray.filter(card => validateCred(card) ===
    false);
  return invalidCards;
}



// Storing all invalid creditcards in a global scope, if we choose to work with later on.
const invalidCreditCards = findInvalidCards(batch)




// Our identification checker, which iterates through amount of invalid cards
// Everytime a number === a company pref start (1 - 6) it pushes the company name to the const companies.
const idInvalidCardCompanies = invalidCreditCards => { 
  const companies = []
  for (let i = 0; i < invalidCreditCards.length; i++) {
    if (invalidCreditCards[i][0] === 3) {
      companies.push('Amex')
    } else if (invalidCreditCards[i][0] === 4) {
      companies.push('Visa')
    } else if (invalidCreditCards[i][0] === 5) {
      companies.push('MasterCard')
    } else if (invalidCreditCards[i][0] === 6) {
      companies.push('Discover')
    } else {
      console.log("Company Not Found")
    }
  }
 return companies;

} 


// Storing the idInvalidCardCompanies-function result, as a global variable array
const invalidCompanies = idInvalidCardCompanies(invalidCreditCards); 
let uniqueArr = [...new Set(invalidCompanies)] // removing the doubles. 


console.log(validateCred(valid1)) // See in the console.log, a manual check for true / false on each creditcard
console.log(invalidCreditCards) // See in the console.log, invalid creditCards
console.log(idInvalidCardCompanies(invalidCreditCards)) // See in the console.log, the companies
console.log(uniqueArr) // See in the console.log, the companies with no doubles. 


```
